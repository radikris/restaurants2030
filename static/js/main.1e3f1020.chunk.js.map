{"version":3,"sources":["pages/restaurant/restaurant_page.tsx","store/api_context.ts","pages/management/components/analytics_page.tsx","pages/management/components/manager_page.tsx","pages/management/management_page.tsx","pages/kitchen/kitchen_page.tsx","pages/waiter/components/swipeable_item.tsx","pages/waiter/components/added_order_item.tsx","pages/waiter/components/add_order_card.tsx","pages/waiter/components/done_order_card.tsx","pages/waiter/components/select_payment_option.tsx","util/app_util.js","models/order_status.ts","pages/waiter/components/table_bill_list.tsx","pages/waiter/components/table_pay_bill.tsx","pages/waiter/components/table_pay_modal.tsx","pages/waiter/components/table_card.tsx","pages/waiter/waiter_page.tsx","util/agent.ts","pages/login/login_page.tsx","pages/registration/registration_page.tsx","util/constants.js","common/navigation/chakra_nav.tsx","common/navigation/Layout.tsx","common/navigation/common_navigator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RestaurantPage","ApiContext","React","createContext","AnalyticsPage","apiContext","useContext","useForm","register","handleSubmit","formState","errors","isSubmitting","useEffect","connection","state","HubConnectionState","Connected","start","val","useState","value","setValue","handleNewFoodDrink","useCallback","newFoodDrink","console","log","on","foodDrink","maxW","w","mb","p","shadow","borderWidth","alignSelf","base","lg","borderColor","borderRadius","boxShadow","rounded","background","overflow","onSubmit","data","Promise","resolve","fd","name","price","invoke","NewFoodDrink","isInvalid","htmlFor","id","placeholder","required","minLength","message","onChange","valueString","replace","min","mt","colorScheme","isLoading","type","ManagerPage","ManagementPage","isFitted","variant","color","KitchenPage","SwipeableItem","props","fullSwipe","style","backgroundColor","ListType","ANDROID","threshold","list","map","order","trailingActions","orderAction","onClick","destructive","bg","justifyContent","display","d","px","icon","swipeChild","children","table","AddedOrderItem","spacing","size","title","onClose","availableMenus","AddOrderCard","waiterContext","WaiterContext","selectedItems","setSelectedItems","sortedMenus","setSortedMenus","foodDrinks","changeOrderQuantity","change","findAddedItem","findIndex","menu","currentStateOfItem","quantity","modifiedList","handleOrderRemove","findRemovedItem","filter","_","idx","clearOrders","item","my","pointerEvents","Search","event","text","target","toLowerCase","includes","length","trim","alignItems","zIndex","position","handleOrderSelected","Add","top","right","TableNum","tableNum","NewOrders","DoneOrderCard","flexGrow","mx","fontSize","fontWeight","orderName","showTable","RadioCard","useRadio","getInputProps","getCheckboxProps","input","checkbox","as","label","cursor","_checked","_focus","py","SelectPaymentOption","useRadioGroup","defaultValue","getRootProps","getRadioProps","group","radio","OrderStatus","formatter","Intl","NumberFormat","currency","TableBillList","orders","alignContent","mr","isSplitBill","format","moveOrder","buttonText","border","reduce","a","b","TablePayBill","setIsSplitBill","normalBill","setNormalBill","splitBill","setSplitBill","templateRows","templateColumns","gap","colSpan","orderIdx","o","i","prevSplitBill","TablePayModal","toggleOpen","isOpen","TableCard","isPayOpen","setIsPayOpen","prevPayOpen","m","_hover","transform","tableNumber","addNewOrders","addOrder","x","orderStatus","InProgress","Ready","changeStatus","Served","ActionTypes","WaiterPage","restaurantFoodDrinks","setRestaurantFoodDrinks","useReducer","produce","draft","action","INITIAL","undefined","forEach","get","push","set","ORDER_STATUS_CHANGED","ADD_ORDER","Map","tableOrdersRemastered","tableOrdersRemasteredDispatch","handleChangeStatus","handleInitial","allOrders","handleAllFoodDrink","allFoodDrinks","handleAddOrder","handleAddNewOrders","handleChangeStatusInvoke","status","Id","then","allPendingOrder","setAllPendingOrders","isDescending","setIsDescending","handleSortList","retValue","sortedList","sort","returnArray","index","concat","Array","from","formValues","axios","post","response","localStorage","setItem","JSON","stringify","history","getToken","user","getItem","parse","accessToken","defaults","baseURL","interceptors","request","use","config","token","headers","Authorization","CFaUserAlt","chakra","FaUserAlt","CFaLock","FaLock","App","showPassword","setShowPassword","handleShowClick","flexDirection","width","height","initialValues","email","password","values","login","setSubmitting","flexDir","minW","md","field","h","textAlign","href","restaurantName","Routes","LinkItems","RiRestaurantFill","link","GrUserManager","BiFoodMenu","GrRestaurant","SimpleSidebar","useDisclosure","onOpen","minH","useColorModeValue","autoFocus","placement","returnFocusOnClose","onOverlayClick","ml","SidebarContent","rest","borderRight","borderRightColor","pos","fontFamily","NavItem","to","textDecoration","align","role","_groupHover","MobileNav","borderBottomWidth","borderBottomColor","Layout","CommonNavigator","restaurantId","HubConnectionBuilder","withUrl","accessTokenFactory","toString","withAutomaticReconnect","configureLogging","LogLevel","Debug","build","Provider","path","exact","render","enableMapSet","createBrowserHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e3f1020.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function RestaurantPage() {\n    return (\n        <div>\n            RESTAURANT NÉZET\n        </div>\n    )\n}\n","import { HubConnection } from \"@microsoft/signalr\";\nimport React from \"react\";\n\n\nexport interface ApiContextInterface {\n    connection: HubConnection | null;\n    restaurantId: number;\n}\n\nconst ApiContext = React.createContext<ApiContextInterface | null>(null);\n\nexport default ApiContext;","import {\n  Box,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Center,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useCallback } from \"react\";\n\nimport { useForm } from \"react-hook-form\";\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Input,\n  Button,\n} from \"@chakra-ui/react\";\n\nimport { FoodDrink } from \"../../../models/food_drink\";\nimport ApiContext from \"../../../store/api_context\";\nimport { HubConnectionState } from \"@microsoft/signalr\";\n\ninterface IFormFoodDrink {\n  name: string;\n  price: number;\n}\n\nexport default function AnalyticsPage() {\n  const apiContext = React.useContext(ApiContext);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm();\n\n  useEffect(() => {\n    if (apiContext?.connection) {\n      if (apiContext?.connection.state !== HubConnectionState.Connected) {\n        apiContext?.connection.start();\n      }\n    }\n  }, [apiContext?.connection]);\n\n  function onSubmit(data: IFormFoodDrink) {\n    return new Promise((resolve) => {\n      const fd = {\n        name: data[\"name\"],\n        price: +value,\n      };\n\n      console.log(fd);\n      resolve(\n        apiContext?.connection?.invoke(\"AddNewFoodDrink\", {\n          NewFoodDrink: fd,\n        })\n      );\n    });\n  }\n\n  const format = (val: string) => `$` + val;\n  const parse = (val: string) => val.replace(/^\\$/, \"\");\n\n  const [value, setValue] = React.useState(\"0.0\");\n\n  const handleNewFoodDrink = useCallback((newFoodDrink: FoodDrink) => {\n    console.log(newFoodDrink);\n  }, []);\n\n  useEffect(() => {\n    if (apiContext?.connection) {\n      apiContext?.connection.on(\n        \"AddNewFoodDrinkHandler\",\n        (foodDrink: FoodDrink) => {\n          handleNewFoodDrink(foodDrink);\n        }\n      );\n    }\n  }, [apiContext, handleNewFoodDrink]);\n\n  return (\n    <Center>\n      <Box\n        maxW={\"400px\"}\n        w={\"full\"}\n        mb={4}\n        p={3}\n        shadow=\"base\"\n        borderWidth=\"1px\"\n        alignSelf={{ base: \"center\", lg: \"flex-start\" }}\n        borderColor=\"gray.200\"\n        borderRadius={\"xl\"}\n        boxShadow={\"2xl\"}\n        rounded={\"md\"}\n        background={\"white\"}\n        overflow={\"hidden\"}\n      >\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl isInvalid={errors.name}>\n            <FormLabel htmlFor=\"name\">Please add your new food/drink</FormLabel>\n            <Input\n              id=\"name\"\n              placeholder=\"Food or drink name\"\n              {...register(\"name\", {\n                required: \"This is required\",\n                minLength: { value: 4, message: \"Minimum length should be 4\" },\n              })}\n            />\n            <NumberInput\n              id=\"price\"\n              {...register(\"price\", {\n                required: \"This is required\",\n              })}\n              onChange={(valueString) => setValue(parse(valueString))}\n              value={format(value)}\n              min={0}\n            >\n              <NumberInputField />\n              <NumberInputStepper>\n                <NumberIncrementStepper />\n                <NumberDecrementStepper />\n              </NumberInputStepper>\n            </NumberInput>\n            <FormErrorMessage>\n              {errors.name && errors.name.message}\n            </FormErrorMessage>\n          </FormControl>\n          <Center>\n            <Button\n              mt={4}\n              colorScheme=\"teal\"\n              isLoading={isSubmitting}\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          </Center>\n        </form>\n      </Box>\n    </Center>\n  );\n}\n","import { Box, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nexport default function ManagerPage() {\n  return (\n    <Box>\n      <Text>ANALYTICS CHARTS</Text>\n    </Box>\n  );\n}\n","import { Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AnalyticsPage from \"./components/analytics_page\";\nimport ManagerPage from \"./components/manager_page\";\n\nexport default function ManagementPage() {\n  return (\n    <Tabs isFitted variant=\"enclosed\">\n      <TabList mb=\"1em\" color=\"black\" background=\"papayawhip\">\n        <Tab>Management</Tab>\n        <Tab>Analytics</Tab>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n          <AnalyticsPage />\n        </TabPanel>\n        <TabPanel>\n          <ManagerPage />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n","import React from \"react\";\n\nexport default function KitchenPage() {\n  return <div>KITCHEN NÉZET</div>;\n}\n","import { Box, Center, Flex } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport {\n  SwipeableList,\n  SwipeableListItem,\n  SwipeAction,\n  TrailingActions,\n  Type as ListType,\n} from \"react-swipeable-list\";\nimport \"react-swipeable-list/dist/styles.css\";\nimport { Order } from \"../../../models/order\";\n\ninterface Props {\n  children: (orderName: string, tableNum: number) => React.ReactNode;\n  swipeChild: React.ReactNode;\n  icon: React.ReactNode;\n  list: Order[];\n  onClick: (orderAction: Order) => void;\n}\n\nexport default function SwipeableItem(props: Props) {\n  const trailingActions = (orderAction: Order, onClick: (orderAction: Order) => void) => (\n    <TrailingActions>\n      <SwipeAction\n        destructive={true}\n        onClick={() => {\n          onClick(orderAction);\n        }}\n      >\n        <Box bg=\"red.200\">\n          <Center justifyContent=\"justify-center\" display=\"row\" d=\"flex\" px=\"1\">\n            {props.icon}\n            {props.swipeChild}\n          </Center>\n        </Box>\n      </SwipeAction>\n    </TrailingActions>\n  );\n\n  return (\n    <Flex>\n        <SwipeableList\n          fullSwipe={true}\n          style={{ backgroundColor: \"orange.200\" }}\n          type={ListType.ANDROID}\n          threshold={0.5}\n        >\n        {props.list.map((order) => (\n          <SwipeableListItem \n            key={order.id} \n            trailingActions={trailingActions(order, props.onClick)}>\n              {props.children(order.name, order.table)}\n          </SwipeableListItem>\n          ))}\n        </SwipeableList>\n    </Flex>\n  );\n}\n","import { HStack, Tag, TagCloseButton, TagLabel } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nexport interface Props {\n  onClose: (id: number) => void;\n  title: string;\n  id: number;\n}\n\nexport default function AddedOrderItem(props: Props) {\n  return (\n    <HStack spacing={4}>\n      <Tag\n        size={\"md\"}\n        key={props.id}\n        borderRadius=\"full\"\n        variant=\"solid\"\n        colorScheme=\"orange\"\n      >\n        <TagLabel>{props.title}</TagLabel>\n        <TagCloseButton onClick={() => props.onClose(props.id)} />\n      </Tag>\n    </HStack>\n  );\n}\n","import React, { ChangeEvent, useEffect } from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport {\n  Box,\n  Button,\n  Text,\n  Center,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverContent,\n  PopoverFooter,\n  PopoverTrigger,\n  Portal,\n  Divider,\n  VStack,\n  InputGroup,\n  InputLeftElement,\n  Input,\n  IconButton,\n  Wrap,\n  Badge,\n} from \"@chakra-ui/react\";\nimport { AddIcon, SearchIcon } from \"@chakra-ui/icons\";\n\nimport AddedOrderItem from \"./added_order_item\";\nimport { Order } from \"../../../models/order\";\nimport { FoodDrink } from \"../../../models/food_drink\";\nimport WaiterContext from \"../../../store/api_context\";\n\nexport interface AddOrderProps {\n  tableNum: number;\n  foodDrinks: FoodDrink[];\n  addNewOrders: (order: Order) => void;\n}\n\nvar availableMenus: FoodDrink[] = [];\n\nconst AddOrderCard = (props: AddOrderProps) => {\n  const waiterContext = React.useContext(WaiterContext);\n\n  const [selectedItems, setSelectedItems] = React.useState<FoodDrink[]>([]);\n\n  const [sortedMenus, setSortedMenus] = React.useState<FoodDrink[]>([]);\n\n  useEffect(() => {\n    availableMenus = props.foodDrinks;\n    setSortedMenus(props.foodDrinks);\n  }, [props.foodDrinks]);\n\n  const changeOrderQuantity = (id: number, change: number) => {\n    let findAddedItem = sortedMenus.findIndex((menu) => menu.id === id);\n\n    var currentStateOfItem = { ...sortedMenus[findAddedItem] };\n    currentStateOfItem.quantity = currentStateOfItem.quantity + change;\n    let modifiedList = sortedMenus;\n    modifiedList[findAddedItem] = currentStateOfItem;\n\n    setSortedMenus(modifiedList);\n  };\n\n  const handleOrderRemove = (id: number) => {\n    let findRemovedItem = selectedItems.findIndex((menu) => menu.id === id);\n    setSelectedItems(selectedItems.filter((_, idx) => idx !== findRemovedItem));\n\n    changeOrderQuantity(id, -1);\n  };\n\n  const handleOrderSelected = (item: FoodDrink) => {\n    setSelectedItems([...selectedItems, item]);\n\n    changeOrderQuantity(item.id, +1);\n  };\n\n  const handleOrderSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    let text = event.target.value;\n    setSortedMenus(\n      sortedMenus.filter((item) =>\n        item.name.toLowerCase().includes(text.toLowerCase())\n      )\n    );\n\n    if (sortedMenus.length === 0 || text.trim().length === 0) {\n      setSortedMenus(availableMenus);\n    }\n  };\n\n  const clearOrders = () => {\n    setSelectedItems([]);\n    sortedMenus.map((menu) => (menu.quantity = +0));\n    setSortedMenus(sortedMenus);\n  };\n\n  const handleOrderAdd = () => {\n    //ITT KELLENE SZÓLNI SINGNALR AddNewOrders, és selectedItems helyett azon végigmenni\n\n    //connectiont meg a restaurantid-t megkapni contextből, és a tablenumot átadni még a paraméternek\n    //      elején useeffecetben feliratkoztatni:\n    //      connection.on(\"AddNewOrdersHandler\", (orders: Order[]) => {\n    //          handleAddNewOrders(orders);\n    //      });\n    //         connection.invoke(\"AddNewOrders\", { RestaurantId: 1, TableNum: props.tableNum, NewOrders: selectedItems});\n\n    //console.log(selectedItems);\n    console.log(sortedMenus);\n    waiterContext?.connection?.invoke(\"AddNewOrders\", {\n      TableNum: props.tableNum,\n      NewOrders: sortedMenus,\n    });\n    clearOrders();\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <Button colorScheme=\"orange\" size=\"xs\">\n          <FaPlus />\n        </Button>\n      </PopoverTrigger>\n      <Portal>\n        <PopoverContent>\n          <PopoverArrow />\n          <PopoverBody>\n            <Wrap>\n              {selectedItems.map((item) => (\n                <AddedOrderItem\n                  key={item.id}\n                  title={item.name}\n                  id={item.id}\n                  onClose={handleOrderRemove}\n                />\n              ))}\n            </Wrap>\n            <Divider my={1} />\n            <Box>\n              <VStack>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<SearchIcon color=\"gray.300\" />}\n                  />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search for orders...\"\n                    onChange={handleOrderSearch}\n                  />\n                </InputGroup>\n                <Button\n                  my={2}\n                  colorScheme={\"red\"}\n                  size={\"xs\"}\n                  onClick={clearOrders}\n                  variant={\"outline\"}\n                >\n                  REMOVE ALL ORDERS\n                </Button>\n                {sortedMenus.map((item) => (\n                  <Box\n                    key={item.id}\n                    w={\"full\"}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    justifyContent=\"space-between\"\n                  >\n                    <Text>{item.name}</Text>\n                    <Box zIndex={1}>\n                      <IconButton\n                        position=\"relative\"\n                        size={\"sm\"}\n                        onClick={() => handleOrderSelected(item)}\n                        aria-label=\"Add menu\"\n                        icon={\n                          <>\n                            <AddIcon />\n                            {item.quantity != null && item.quantity > 0 && (\n                              <Badge\n                                position={\"absolute\"}\n                                top={\"-5px\"}\n                                right={\"-5px\"}\n                                colorScheme=\"red\"\n                              >\n                                {item.quantity}\n                              </Badge>\n                            )}\n                          </>\n                        }\n                      />\n                    </Box>\n                  </Box>\n                ))}\n              </VStack>\n            </Box>\n          </PopoverBody>\n          <PopoverFooter>\n            <Center>\n              <Button\n                colorScheme=\"teal\"\n                variant=\"outline\"\n                onClick={handleOrderAdd}\n              >\n                ADD ORDERS\n              </Button>\n            </Center>\n          </PopoverFooter>\n        </PopoverContent>\n      </Portal>\n    </Popover>\n  );\n};\n\nexport default AddOrderCard;\n","import { Badge, Box, Divider, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nexport interface Props {\n  orderName: string;\n  tableNum: number;\n  showTable: boolean;\n  fontSize: string;\n}\n\nexport default function DoneOrderCard(props: Props) {\n  return (\n    <Box flexGrow={1} mx={2}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Text fontSize={props.fontSize} fontWeight=\"bold\">\n          {props.orderName}\n        </Text>\n        {props.showTable && (\n          <Badge my=\"1\" fontSize=\"0.8em\" colorScheme=\"green\" variant=\"solid\">\n            TABLE {props.tableNum}\n          </Badge>\n        )}\n      </Box>\n      <Divider />\n    </Box>\n  );\n}\n","import { Box } from \"@chakra-ui/layout\";\nimport {\n  HStack,\n  useRadio,\n  useRadioGroup,\n  UseRadioProps,\n} from \"@chakra-ui/react\";\nimport React, { FC } from \"react\";\nimport { PaymentOption } from \"../../../models/payment_option\";\n\nexport interface Props {\n  paymentOption: PaymentOption;\n  isSelected: boolean;\n}\n\ninterface RadioCardProps extends UseRadioProps {\n  label: string;\n  children: React.ReactNode;\n}\n// 1. Create a component that consumes the `useRadio` hook\nconst RadioCard: FC<RadioCardProps> = (props) => {\n  const { getInputProps, getCheckboxProps } = useRadio(props);\n\n  const input = getInputProps();\n  const checkbox = getCheckboxProps();\n\n  return (\n    <Box as=\"label\">\n      <input {...input} onClick={() => console.log(props.label)} />\n      <Box\n        {...checkbox}\n        cursor=\"pointer\"\n        borderWidth=\"1px\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        _checked={{\n          bg: \"teal.600\",\n          color: \"white\",\n          borderColor: \"teal.600\",\n        }}\n        _focus={{\n          boxShadow: \"outline\",\n        }}\n        px={5}\n        py={3}\n      >\n        {props.children}\n      </Box>\n    </Box>\n  );\n};\n\n// Step 2: Use the `useRadioGroup` hook to control a group of custom radios.\n//        {$enum(PaymentOption).map((paymentOpt) => {\n\nexport default function SelectPaymentOption() {\n  const options = [\"Cash\", \"BankCard\"];\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: \"framework\",\n    defaultValue: \"react\",\n    onChange: console.log,\n  });\n\n  const group = getRootProps();\n\n  return (\n    <HStack {...group}>\n      {options.map((value) => {\n        const radio = getRadioProps({ value });\n        return (\n          <RadioCard label={value} key={value} {...radio}>\n            {value}\n          </RadioCard>\n        );\n      })}\n    </HStack>\n  );\n}\n","const formatter = new Intl.NumberFormat(\"hu-HU\", {\n  style: \"currency\",\n  currency: \"HUF\",\n});\n\nexport { formatter };\n","export enum OrderStatus {\n    InProgress = 0,\n    Ready = 1,\n    Served = 2,\n  }","import { Box, Text, Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Order } from \"../../../models/order\";\nimport { formatter } from \"../../../util/app_util\";\n\nexport interface Props {\n  orders: Order[];\n  moveOrder: (id: number) => void;\n  buttonText: string;\n  isSplitBill: boolean;\n}\n\nexport default function TableBillList(props: Props) {\n  return (\n    <Box>\n      {props.orders.map((table) => {\n        return (\n          <Box\n            key={table.id}\n            display={\"flex\"}\n            w={\"full\"}\n            justifyContent={\"space-between\"}\n            alignContent={\"center\"}\n            alignItems={\"center\"}\n            my={1}\n          >\n            <Box\n              display={\"flex\"}\n              w={\"full\"}\n              justifyContent={\"space-between\"}\n              mr={props.isSplitBill ? 3 : 0}\n            >\n              <Text>{table.name}</Text>\n              <Text>{formatter.format(table.price)}</Text>\n            </Box>\n            {props.isSplitBill && (\n              <Button\n                onClick={() => props.moveOrder(table.id)}\n                colorScheme={\"orange\"}\n                variant={\"outline\"}\n                size={\"sm\"}\n              >\n                {props.buttonText}\n              </Button>\n            )}\n          </Box>\n        );\n      })}\n      <Box\n        w={\"full\"}\n        border={1}\n        display={\"flex\"}\n        bg={\"green.300\"}\n        justifyContent={\"space-between\"}\n      >\n        <Text fontWeight={\"bold\"}>Total amount:</Text>\n        <Text fontWeight={\"extrabold\"}>\n          {formatter.format(props.orders.reduce((a, b) => +a + b.price, 0))}\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n","import { Button, Text } from \"@chakra-ui/react\";\nimport { Box, Center, Grid, GridItem, VStack } from \"@chakra-ui/layout\";\nimport React, { useState } from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport SelectPaymentOption from \"./select_payment_option\";\nimport TableBillList from \"./table_bill_list\";\nimport { Order } from \"../../../models/order\";\n\nexport interface IProps {\n  table: Order[];\n}\n\nexport default function TablePayBill(props: IProps) {\n  const [isSplitBill, setIsSplitBill] = useState(false);\n\n  const [normalBill, setNormalBill] = useState(props.table);\n  const [splitBill, setSplitBill] = useState<Order[]>([]);\n\n  const toggleSplitBill = () => {\n    setIsSplitBill((prevSplitBill) => !prevSplitBill);\n\n    setNormalBill([...normalBill, ...splitBill]);\n    setSplitBill([]);\n  };\n\n  const moveOrderToSplit = (id: number) => {\n    const orderIdx = normalBill.findIndex((o) => o.id === id);\n    const order = normalBill[orderIdx];\n\n    setNormalBill(normalBill.filter((_, i) => i !== orderIdx));\n    setSplitBill([...splitBill, order]);\n\n    console.log(\"tosplit\");\n  };\n  const moveOrderToNormalBill = (id: number) => {\n    const orderIdx = splitBill.findIndex((o) => o.id === id);\n    const order = splitBill[orderIdx];\n    setSplitBill(splitBill.filter((_, i) => i !== orderIdx));\n    setNormalBill([...normalBill, order]);\n\n    console.log(\"tonormal\");\n  };\n\n  return (\n    <Grid\n      templateRows=\"repeat(1, 1fr)\"\n      templateColumns=\"repeat(3, 1fr)\"\n      gap={4}\n    >\n      <GridItem colSpan={1} bg=\"papayawhip\" p={2}>\n        <TableBillList\n          orders={normalBill}\n          moveOrder={moveOrderToSplit}\n          isSplitBill={isSplitBill}\n          buttonText={\"SPLIT\"}\n        />\n        {!isSplitBill && (\n          <Center>\n            <Button>PAY</Button>\n          </Center>\n        )}\n      </GridItem>\n      <GridItem colSpan={1} bg=\"papayawhip\" p={2}>\n        <Center>\n          <VStack display={\"flex\"} w={\"full\"}>\n            <Button\n              colorScheme=\"orange\"\n              size=\"xl\"\n              onClick={toggleSplitBill}\n              p={1}\n            >\n              {!isSplitBill && (\n                <Text mx={1}>Do you want to split the bill?</Text>\n              )}\n              {isSplitBill && <Text mx={1}>Back to only normal bill</Text>}\n              <FaPlus />\n            </Button>\n\n            {isSplitBill && (\n              <Box w={\"full\"} color={\"blue.800\"}>\n                <TableBillList\n                  orders={splitBill}\n                  moveOrder={moveOrderToNormalBill}\n                  isSplitBill={isSplitBill}\n                  buttonText={\"UNDO\"}\n                />\n                <Center>\n                  <Button>PAY</Button>\n                </Center>\n              </Box>\n            )}\n          </VStack>\n        </Center>\n      </GridItem>\n      <GridItem colSpan={1}>\n        <SelectPaymentOption />\n      </GridItem>\n    </Grid>\n  );\n}\n","import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Order } from \"../../../models/order\";\nimport TablePayBill from \"./table_pay_bill\";\n\nexport interface IProps {\n  isOpen: boolean;\n  toggleOpen: () => void;\n  table: Order[];\n  tableNum: number;\n}\n\nexport default function TablePayModal(props: IProps) {\n  return (\n    <Modal onClose={props.toggleOpen} size={\"full\"} isOpen={props.isOpen}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Payment for TABLE{props.tableNum} </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <TablePayBill table={props.table} />\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={props.toggleOpen}>Close</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import {\n  Badge,\n  Box,\n  Grid,\n  VStack,\n  Text,\n  Divider,\n  Button,\n} from \"@chakra-ui/react\";\n\nimport \"react-swipeable-list/dist/styles.css\";\n\nimport { FaArrowAltCircleDown, FaArrowAltCircleUp } from \"react-icons/fa\";\nimport SwipeableItem from \"./swipeable_item\";\n\nimport React from \"react\";\nimport AddOrderCard from \"./add_order_card\";\nimport DoneOrderCard from \"./done_order_card\";\nimport TablePayModal from \"./table_pay_modal\";\nimport { OrderStatus } from \"../../../models/order_status\";\nimport { Order } from \"../../../models/order\";\nimport { FoodDrink } from \"../../../models/food_drink\";\n\ninterface Props {\n  table: Order[];\n  foodDrinks: FoodDrink[];\n  tableNumber: number;\n  addOrder: (order: Order) => void;\n  changeStatus: (order: Order, status: OrderStatus) => void;\n}\n\nexport default function TableCard(props: Props) {\n  const [isPayOpen, setIsPayOpen] = React.useState(false);\n\n  const toggleOpen = () => {\n    setIsPayOpen((prevPayOpen) => !prevPayOpen);\n  };\n\n  return (\n    <Box\n      maxW={\"270px\"}\n      w={\"full\"}\n      bg=\"whiteAlpha.900\"\n      boxShadow={\"2xl\"}\n      rounded={\"md\"}\n      overflow={\"hidden\"}\n      m=\"3\"\n      _hover={{\n        transform: \"scale(1.2)\",\n        boxShadow: \"lg\",\n        borderColor: \"grey.900\",\n      }}\n    >\n      <Box p={6}>\n        <VStack spacing=\"2px\">\n          <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n            <Box />\n            <Badge fontSize=\"md\" mb={1} mr={3}>\n              Table {props.tableNumber}\n            </Badge>\n            <AddOrderCard\n              addNewOrders={props.addOrder}\n              foodDrinks={props.foodDrinks}\n              tableNum={props.tableNumber}\n            />\n          </Grid>\n\n          <Box\n            w=\"100%\"\n            bg=\"orange.200\"\n            d=\"flex\"\n            display=\"table-column\"\n            justifyContent=\"justify-start\"\n          >\n            <SwipeableItem\n              children={(orderName, tableNum) => (\n                <DoneOrderCard\n                  fontSize={\"md\"}\n                  orderName={orderName}\n                  tableNum={tableNum}\n                  showTable={false}\n                />\n              )}\n              swipeChild={<Text>DONE</Text>}\n              icon={<FaArrowAltCircleDown />}\n              list={[\n                ...props.table.filter(\n                  (x) =>\n                    x.orderStatus === OrderStatus.InProgress ||\n                    x.orderStatus === OrderStatus.Ready\n                ),\n              ]}\n              onClick={function (orderAction: Order): void {\n                props.changeStatus(orderAction, OrderStatus.Served);\n              }}\n            />\n          </Box>\n          <Divider variant=\"dashed\" />\n          <Box w=\"100%\" bg=\"green.200\">\n            <SwipeableItem\n              children={(orderName, tableNum) => (\n                <DoneOrderCard\n                  orderName={orderName}\n                  tableNum={tableNum}\n                  showTable={false}\n                  fontSize={\"md\"}\n                />\n              )}\n              swipeChild={<Text>BACK</Text>}\n              icon={<FaArrowAltCircleUp />}\n              list={[\n                ...props.table.filter(\n                  (x) => x.orderStatus === OrderStatus.Served\n                ),\n              ]}\n              onClick={function (orderAction: Order): void {\n                props.changeStatus(orderAction, OrderStatus.Ready);\n              }}\n            />\n          </Box>\n        </VStack>\n\n        <Button\n          w={\"full\"}\n          mt={4}\n          bg=\"gray.900\"\n          color={\"white\"}\n          onClick={toggleOpen}\n          rounded={\"md\"}\n          _hover={{\n            transform: \"translateY(-2px)\",\n            boxShadow: \"lg\",\n          }}\n        >\n          PAY\n        </Button>\n        <TablePayModal\n          isOpen={isPayOpen}\n          table={props.table}\n          toggleOpen={toggleOpen}\n          tableNum={props.tableNumber}\n        />\n      </Box>\n    </Box>\n  );\n}\n","import React, { useState, useEffect, useReducer, useCallback } from \"react\";\n\nimport { Text, Wrap, Grid, GridItem, Center } from \"@chakra-ui/react\";\nimport TableCard from \"./components/table_card\";\nimport DoneOrderCard from \"./components/done_order_card\";\nimport { FaAngleDown, FaAngleUp, FaArrowAltCircleUp } from \"react-icons/fa\";\nimport SwipeableItem from \"./components/swipeable_item\";\nimport produce from \"immer\";\nimport { OrderStatus } from \"../../models/order_status\";\nimport { Order } from \"../../models/order\";\nimport { FoodDrink } from \"../../models/food_drink\";\nimport ApiContext from \"../../store/api_context\";\nimport {\n  HubConnectionState,\n} from \"@microsoft/signalr\";\n\nexport enum ActionTypes {\n  INITIAL = \"Initial\",\n  ORDER_STATUS_CHANGED = \"OrderStatusChanged\",\n  ADD_ORDER = \"AddOrder\",\n}\n\nexport type OrderAction = {\n  type: ActionTypes;\n  order?: Order;\n  orders?: Order[];\n};\n\nexport default function WaiterPage() {\n  const [restaurantFoodDrinks, setRestaurantFoodDrinks] = useState<FoodDrink[]>(\n    []\n  );\n\n  const [tableOrdersRemastered, tableOrdersRemasteredDispatch] = useReducer(\n    produce((draft: Map<number, Order[]>, action: OrderAction) => {\n      switch (action.type) {\n        case ActionTypes.INITIAL: {\n          if (action.orders !== undefined) {\n            action.orders.forEach((order: Order) => {\n              var table = draft.get(order.table);\n              if (table !== undefined) {\n                table.push(order);\n              } else {\n                draft.set(order.table, [order]);\n              }\n            });\n          }\n          break;\n        }\n        case ActionTypes.ORDER_STATUS_CHANGED: {\n          if (action.order !== undefined) {\n            var table = draft.get(action.order.table);\n            if (table !== undefined) {\n              var idx = table.findIndex((x) => x.id === action.order?.id);\n              table[idx] = action.order;\n            }\n          }\n          break;\n        }\n        case ActionTypes.ADD_ORDER: {\n          if (action.order !== undefined) {\n            table = draft.get(action.order.table);\n            if (table !== undefined) {\n              table.push(action.order);\n            }\n          }\n          break;\n        }\n      }\n    }),\n    new Map<number, Order[]>(),\n    undefined\n  );\n\n  const handleChangeStatus = useCallback((order: Order) => {\n    tableOrdersRemasteredDispatch({\n      type: ActionTypes.ORDER_STATUS_CHANGED,\n      order,\n    });\n  }, []);\n\n  const handleInitial = useCallback((allOrders: Order[]) => {\n    tableOrdersRemasteredDispatch({\n      type: ActionTypes.INITIAL,\n      orders: allOrders,\n    });\n  }, []);\n\n  const handleAllFoodDrink = useCallback((allFoodDrinks: FoodDrink[]) => {\n    setRestaurantFoodDrinks(allFoodDrinks);\n    console.log(allFoodDrinks);\n  }, []);\n\n  const handleAddOrder = useCallback((order: Order) => {\n    tableOrdersRemasteredDispatch({\n      type: ActionTypes.ADD_ORDER,\n      order: order,\n    });\n  }, []);\n\n  const handleAddNewOrders = useCallback(\n    (orders: Order[]) => {\n      console.log(\"visszajott a letrehozott\");\n      console.log(orders);\n\n      orders.forEach((item) => {\n        handleAddOrder(item);\n      });\n    },\n    [handleAddOrder]\n  );\n\n  //const [connection, setConnection] = useState<null | HubConnection>(null);\n\n  const apiContext = React.useContext(ApiContext);\n\n  /*useEffect(() => {\n    if (apiContext?.connection) {\n      setConnection(apiContext?.connection!);\n    }\n  }, [apiContext?.connection]);*/\n\n  const handleChangeStatusInvoke = useCallback(\n    (order: Order, status: OrderStatus) => {\n      apiContext?.connection?.invoke(\"UpdateOrderStatus\", {\n        Id: order.id,\n        OrderStatus: status,\n      });\n    },\n    [apiContext]\n  );\n\n  useEffect(() => {\n    if (apiContext?.connection) {\n      if (apiContext?.connection.state !== HubConnectionState.Connected)\n        apiContext?.connection.start().then(() => {\n          apiContext?.connection?.invoke(\"GetAllOrders\");\n          apiContext?.connection?.invoke(\"GetAllFoodDrink\");\n        });\n      \n      apiContext?.connection.on(\"AllOrders\", (orders: Order[]) => {\n        handleInitial(orders);\n      });\n\n      apiContext?.connection.on(\"OrderStatusUpdated\", (order: Order) => {\n        handleChangeStatus(order);\n      });\n\n      apiContext?.connection.on(\"AllFoodDrinksHandler\", (foodDrinks: FoodDrink[]) => {\n        handleAllFoodDrink(foodDrinks);\n      });\n\n      apiContext?.connection.on(\"AddNewOrdersHandler\", (orders: Order[]) => {\n        handleAddNewOrders(orders);\n      });\n\n      if (apiContext?.connection.state === HubConnectionState.Connected) {\n        apiContext?.connection.invoke(\"GetAllOrders\");\n        apiContext?.connection.invoke(\"GetAllFoodDrink\");\n      }\n    }\n  }, [\n    apiContext?.connection,\n    handleChangeStatus,\n    handleInitial,\n    handleAllFoodDrink,\n    handleAddNewOrders,\n  ]);\n\n  const [allPendingOrder, setAllPendingOrders] = useState<Order[]>([]);\n  const [isDescending, setIsDescending] = useState<boolean>(true);\n\n  const handleSortList = () => {\n    const retValue = isDescending ? 1 : -1;\n\n    const sortedList = allPendingOrder.sort((a, b) =>\n      a.table > b.table ? retValue : -1 * retValue\n    );\n\n    setIsDescending(!isDescending);\n    setAllPendingOrders(sortedList);\n  };\n\n  useEffect(() => {\n    var returnArray: Order[] = [];\n    tableOrdersRemastered.forEach(\n      (order, index) =>\n        (returnArray = returnArray.concat(\n          order.filter(\n            (x) =>\n              x.orderStatus === OrderStatus.InProgress ||\n              x.orderStatus === OrderStatus.Ready\n          )\n        ))\n    );\n    setAllPendingOrders(returnArray);\n  }, [tableOrdersRemastered]);\n\n  return (\n    <Grid\n      templateRows=\"repeat(1, 1fr)\"\n      templateColumns=\"repeat(5, 1fr)\"\n      gap={4}\n    >\n      <GridItem colSpan={4} bg=\"papayawhip\" p={2}>\n        <Wrap>\n          {Array.from(tableOrdersRemastered).map((orders) => (\n            <TableCard\n              key={orders[0]}\n              table={orders[1]}\n              tableNumber={orders[0]}\n              foodDrinks={restaurantFoodDrinks}\n              addOrder={handleAddOrder}\n              changeStatus={handleChangeStatusInvoke}\n            />\n          ))}\n        </Wrap>\n      </GridItem>\n      <GridItem colSpan={1} bg=\"tomato\">\n        <Center mx={1}>\n          <Text\n            my={3}\n            mx={3}\n            fontSize={\"2xl\"}\n            fontWeight={\"bold\"}\n            color={\"grey.700\"}\n          >\n            Finished orders\n          </Text>\n          {isDescending && <FaAngleUp onClick={handleSortList} />}\n          {!isDescending && <FaAngleDown onClick={handleSortList} />}\n        </Center>\n        <SwipeableItem\n          children={(orderName, tableNum) => (\n            <DoneOrderCard\n              orderName={orderName}\n              tableNum={tableNum}\n              showTable={true}\n              fontSize={\"xl\"}\n            />\n          )}\n          swipeChild={<Text>DONE</Text>}\n          icon={<FaArrowAltCircleUp />}\n          list={allPendingOrder}\n          onClick={function (orderAction: Order): void {\n            handleChangeStatusInvoke(orderAction, OrderStatus.Served);\n          }}\n        />\n      </GridItem>\n    </Grid>\n  );\n}\n","import axios from \"axios\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { history } from \"../App\";\n\naxios.defaults.baseURL = \"http://localhost:5000/api\";\n\naxios.interceptors.request.use(config => {\n    const token = getToken();\n    if (token)\n        config!.headers!.Authorization = `Bearer ${token}`;\n\n    return config;\n});\n\nexport async function login(formValues: UserFormValues): Promise<User | null> {\n    const response = await axios.post<User>(\"/account/login\", formValues);\n    if (response.data) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n        history.push(\"/\");\n        return response.data;\n    }\n\n    return null;\n}\n\nexport async function register(formValues: UserFormValues): Promise<User | null> {\n    const response = await axios.post<User>(\"/account/register\", formValues);\n    if (response.data) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n        history.push(\"/\");\n        return response.data;\n    }\n\n    return null;\n}\n\nexport function logout(): void {\n    localStorage.removeItem(\"user\");\n}\n\nexport function getToken(): string | null {\n    const user = localStorage.getItem(\"user\");\n    if (user) {\n        const obj: User = JSON.parse(user)\n        return obj.accessToken;\n    }\n\n    return null;\n}","import { useState } from \"react\";\nimport {\n  Flex,\n  Heading,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  Link,\n  Avatar,\n  FormControl,\n  FormHelperText,\n  InputRightElement\n} from \"@chakra-ui/react\";\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport { FaUserAlt, FaLock } from \"react-icons/fa\";\n\nimport { login } from '../../util/agent';\n\nconst CFaUserAlt = chakra(FaUserAlt);\nconst CFaLock = chakra(FaLock);\n\nconst App = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleShowClick = () => setShowPassword(!showPassword);\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      width=\"100wh\"\n      height=\"100vh\"\n      backgroundColor=\"gray.200\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Formik\n        initialValues={{email: '', password: ''}}\n        onSubmit={(values, action) => {\n          login(values);\n          action.setSubmitting(false);\n        }}\n      >\n        {({isSubmitting}) => (\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"teal.500\" />\n        <Heading color=\"teal.400\">Welcome</Heading>\n        <Box minW={{ base: \"90%\", md: \"468px\" }}>\n          <Form>\n            <Stack\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"md\"\n            >\n              <Field name=\"email\">\n                {({ field }: FieldProps) => (\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaUserAlt color=\"gray.300\" />}\n                  />\n                  <Input {...field} type=\"email\" placeholder=\"email address\" />\n                </InputGroup>\n              </FormControl>\n              )}\n              </Field>\n              <Field name=\"password\">\n              {({ field }: FieldProps) => (\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.300\"\n                    children={<CFaLock color=\"gray.300\" />}\n                  />\n                  <Input\n                    {...field}\n                    name=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                  />\n                  <InputRightElement width=\"4.5rem\">\n                    <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowClick}>\n                      {showPassword ? \"Hide\" : \"Show\"}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n                <FormHelperText textAlign=\"right\">\n                  <Link>forgot password?</Link>\n                </FormHelperText>\n              </FormControl>\n              )}\n              </Field>\n              <Button\n                borderRadius={0}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                width=\"full\"\n                isLoading={isSubmitting}\n              >\n                Login\n              </Button>\n            </Stack>\n          </Form>\n        </Box>\n      </Stack>\n      )}\n      </Formik>\n      <Box>\n        New to us?{\" \"}\n        <Link color=\"teal.500\" href=\"/registration\">\n          Sign Up\n        </Link>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;\n","import { useState } from \"react\";\nimport {\n  Flex,\n  Heading,\n  Input,\n  Button,\n  InputGroup,\n  Stack,\n  InputLeftElement,\n  chakra,\n  Box,\n  Link,\n  Avatar,\n  FormControl,\n  InputRightElement\n} from \"@chakra-ui/react\";\nimport { BiRestaurant } from \"react-icons/bi\";\nimport { FaUserAlt, FaLock } from \"react-icons/fa\";\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport { register } from '../../util/agent';\n\nconst CFaUserAlt = chakra(FaUserAlt);\nconst CFaLock = chakra(FaLock);\n\nconst App = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleShowClick = () => setShowPassword(!showPassword);\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      width=\"100wh\"\n      height=\"100vh\"\n      backgroundColor=\"gray.200\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Formik\n        initialValues={{restaurantName: '', email: '', password: ''}}\n        onSubmit={(values, action) => {\n          register(values);\n          console.log(values);\n          action.setSubmitting(false);\n        }}\n      >\n        {({isSubmitting}) => (\n      <Stack\n        flexDir=\"column\"\n        mb=\"2\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Avatar bg=\"teal.500\" />\n        <Heading color=\"teal.400\">Welcome</Heading>\n        <Box minW={{ base: \"90%\", md: \"468px\" }}>\n          <Form>\n            <Stack\n              spacing={4}\n              p=\"1rem\"\n              backgroundColor=\"whiteAlpha.900\"\n              boxShadow=\"md\"\n            >\n              <Field name=\"restaurantName\">\n              {({ field }: FieldProps) => (\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.300\"\n                    children={<BiRestaurant color=\"gray.300\" />}\n                  />\n                  <Input {...field} type=\"text\" placeholder=\"Restaurant name\"/>\n                </InputGroup>\n              </FormControl>\n              )}\n              </Field>\n              <Field name=\"email\">\n              {({ field }: FieldProps) => (\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<CFaUserAlt color=\"gray.300\" />}\n                  />\n                  <Input {...field} type=\"email\" placeholder=\"email address\" />\n                </InputGroup>\n              </FormControl>\n              )}\n              </Field>\n              <Field name=\"password\">\n              {({ field }: FieldProps) => (\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.300\"\n                    children={<CFaLock color=\"gray.300\" />}\n                  />\n                  <Input\n                    {...field}\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Password\"\n                  />\n                  <InputRightElement width=\"4.5rem\">\n                    <Button h=\"1.75rem\" size=\"sm\" onClick={handleShowClick}>\n                      {showPassword ? \"Hide\" : \"Show\"}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n              </FormControl>\n              )}\n              </Field>\n              <Button\n                borderRadius={0}\n                type=\"submit\"\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                width=\"full\"\n                isLoading={isSubmitting}\n              >\n                Registration\n              </Button>\n            </Stack>\n          </Form>\n        </Box>\n      </Stack>\n      )}\n      </Formik>\n      <Box>\n        Already have an account?{\" \"}\n        <Link color=\"teal.500\" href=\"/login\">\n          Login\n        </Link>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;\n","const Routes = {\n  HOME: \"/\",\n  RESTAURANT: \"/restaurant\",\n  MANAGEMENT: \"/management\",\n  WAITER: \"/waiter\",\n  KITCHEN: \"/kitchen\",\n  LOGIN: \"/login\",\n  REGISTRATION: \"/registration\"\n};\n\nexport { Routes };\n","import React, { ReactNode } from \"react\";\nimport {\n  IconButton,\n  Box,\n  CloseButton,\n  Flex,\n  Icon,\n  useColorModeValue,\n  Drawer,\n  DrawerContent,\n  Text,\n  useDisclosure,\n  BoxProps,\n  FlexProps,\n} from \"@chakra-ui/react\";\nimport { RiRestaurantFill } from \"react-icons/ri\";\nimport { FiMenu } from \"react-icons/fi\";\nimport { BiFoodMenu } from \"react-icons/bi\";\nimport { GrRestaurant, GrUserManager } from \"react-icons/gr\";\nimport { IconType } from \"react-icons\";\nimport { ReactText } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Routes } from \"../../util/constants\";\n\ninterface LinkItemProps {\n  name: string;\n  icon: IconType;\n  link: string;\n}\nconst LinkItems: Array<LinkItemProps> = [\n  { name: \"Home\", icon: RiRestaurantFill, link: Routes.RESTAURANT },\n  { name: \"Management\", icon: GrUserManager, link: Routes.MANAGEMENT },\n  { name: \"Waiter\", icon: BiFoodMenu, link: Routes.WAITER },\n  { name: \"Kitchen\", icon: GrRestaurant, link: Routes.KITCHEN },\n];\n\nexport default function SimpleSidebar({ children }: { children: ReactNode }) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box minH=\"100vh\" bg={useColorModeValue(\"gray.100\", \"gray.900\")}>\n      <SidebarContent\n        onClose={() => onClose}\n        display={{ base: \"none\", md: \"block\" }}\n      />\n      <Drawer\n        autoFocus={false}\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        returnFocusOnClose={false}\n        onOverlayClick={onClose}\n        size=\"full\"\n      >\n        <DrawerContent>\n          <SidebarContent onClose={onClose} />\n        </DrawerContent>\n      </Drawer>\n      {/* mobilenav */}\n      <MobileNav display={{ base: \"flex\", md: \"none\" }} onOpen={onOpen} />\n      <Box ml={{ base: 0, md: 60 }} p=\"4\">\n        {children}\n      </Box>\n    </Box>\n  );\n}\n\ninterface SidebarProps extends BoxProps {\n  onClose: () => void;\n}\n\nconst SidebarContent = ({ onClose, ...rest }: SidebarProps) => {\n  return (\n    <Box\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderRight=\"1px\"\n      borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      w={{ base: \"full\", md: 60 }}\n      pos=\"fixed\"\n      h=\"full\"\n      {...rest}\n    >\n      <Flex h=\"20\" alignItems=\"center\" mx=\"8\" justifyContent=\"space-between\">\n        <Text fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\">\n          Logo\n        </Text>\n        <CloseButton display={{ base: \"flex\", md: \"none\" }} onClick={onClose} />\n      </Flex>\n      {LinkItems.map((link) => (\n        <NavItem key={link.name} icon={link.icon} link={link.link}>\n          {link.name}\n        </NavItem>\n      ))}\n    </Box>\n  );\n};\n\ninterface NavItemProps extends FlexProps {\n  icon: IconType;\n  children: ReactText;\n  link: string;\n}\nconst NavItem = ({ icon, children, link, ...rest }: NavItemProps) => {\n  return (\n    <NavLink to={link} style={{ textDecoration: \"none\" }}>\n      <Flex\n        align=\"center\"\n        p=\"4\"\n        mx=\"4\"\n        borderRadius=\"lg\"\n        role=\"group\"\n        cursor=\"pointer\"\n        _hover={{\n          bg: \"cyan.400\",\n          color: \"white\",\n        }}\n        {...rest}\n      >\n        {icon && (\n          <Icon\n            mr=\"4\"\n            fontSize=\"16\"\n            _groupHover={{\n              color: \"white\",\n            }}\n            as={icon}\n          />\n        )}\n        {children}\n      </Flex>\n    </NavLink>\n  );\n};\n\ninterface MobileProps extends FlexProps {\n  onOpen: () => void;\n}\nconst MobileNav = ({ onOpen, ...rest }: MobileProps) => {\n  return (\n    <Flex\n      ml={{ base: 0, md: 60 }}\n      px={{ base: 4, md: 24 }}\n      height=\"20\"\n      alignItems=\"center\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderBottomWidth=\"1px\"\n      borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      justifyContent=\"flex-start\"\n      {...rest}\n    >\n      <IconButton\n        variant=\"outline\"\n        onClick={onOpen}\n        aria-label=\"open menu\"\n        icon={<FiMenu />}\n      />\n\n      <Text fontSize=\"2xl\" ml=\"8\" fontFamily=\"monospace\" fontWeight=\"bold\">\n        Logo\n      </Text>\n    </Flex>\n  );\n};\n","import { Fragment } from \"react\";\nimport SimpleSidebar from \"./chakra_nav\";\n\ninterface ParentCompProps {\n  childComp?: React.ReactNode;\n}\n\nconst Layout: React.FC<ParentCompProps> = (props) => {\n  return (\n    <Fragment>\n      <SimpleSidebar children={props.children} />\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport RestaurantPage from \"../../pages/restaurant/restaurant_page\";\nimport ManagementPage from \"../../pages/management/management_page\";\nimport KitchenPage from \"../../pages/kitchen/kitchen_page\";\nimport WaiterPage from \"../../pages/waiter/waiter_page\";\nimport LoginPage from \"../../pages/login/login_page\";\nimport RegistrationPage from \"../../pages/registration/registration_page\";\nimport Layout from \"./Layout\";\nimport { Routes } from \"../../util/constants\";\nimport { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport ApiContext, { ApiContextInterface } from \"../../store/api_context\";\nimport { getToken } from \"../../util/agent\";\n\nfunction CommonNavigator() {\n  const apiContext: ApiContextInterface = {\n    restaurantId: 1,\n    connection: new HubConnectionBuilder()\n      .withUrl(\"http://localhost:5000/restauranthub\", {\n        accessTokenFactory: () => getToken()!.toString(),\n      })\n      .withAutomaticReconnect()\n      .configureLogging(LogLevel.Debug)\n      .build(),\n  };\n\n  return (\n    <ApiContext.Provider value={apiContext}>\n      <Layout>\n        <Switch>\n          <Route path={Routes.HOME} exact>\n            <Redirect to={Routes.RESTAURANT} />\n          </Route>\n          <Route path={Routes.RESTAURANT} exact>\n            <RestaurantPage />\n          </Route>\n          <Route\n            path={Routes.MANAGEMENT}\n            render={(props) =>\n              getToken() !== null ? (\n                <ManagementPage />\n              ) : (\n                <Redirect to=\"/login\" />\n              )\n            }\n          />\n          <Route\n            path={Routes.KITCHEN}\n            render={(props) =>\n              getToken() !== null ? <KitchenPage /> : <Redirect to=\"/login\" />\n            }\n          />\n          <Route\n            path={Routes.WAITER}\n            render={(props) =>\n              getToken() !== null ? <WaiterPage /> : <Redirect to=\"/login\" />\n            }\n          />\n          <Route path={Routes.LOGIN}>\n            <LoginPage />\n          </Route>\n          <Route path={Routes.REGISTRATION}>\n            <RegistrationPage />\n          </Route>\n          <Route path=\"*\">\n            <div>NOTHING TO SEE HERE PAGE</div>\n          </Route>\n        </Switch>\n      </Layout>\n    </ApiContext.Provider>\n  );\n}\n\nexport default CommonNavigator;\n","import React from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Router } from \"react-router-dom\";\nimport {createBrowserHistory} from 'history';\nimport CommonNavigator from \"./common/navigation/common_navigator\";\n\nimport { enableMapSet } from \"immer\";\n\nenableMapSet();\n\nexport const history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <Router history={history}>\n        <CommonNavigator />\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}